variant: fcos
version: 1.6.0
grub:
  users:
    - name: root
      password_hash: grub.pbkdf2.sha512.10000.3117DECCDFE84F275645D9D64AD24563DC68E400E83684F2BE242A179183AF7A09D8772B245B5EE9A846B4BE4AEFF9CF04155352526558A6EE7D56F6891CC094.32A3B6082AB86CE5453761DCB47B776A1EB837484037E977A7D0EE21CD9FA61C17290578508904413F06C65B564BA540C8C20D535CB812FA495A87061FD02728 # 'testing'
passwd:
  users:
    - name: core
      groups:
        - wheel
      password_hash: $y$j9T$mefBCJbp/a49aSkTT4hpE1$6BXtrIuV8856t4A9r/R1GW4aR9eKXxsmB8FXt56Hx70 # 'secureblue'
      ssh_authorized_keys:
        - sk-ssh-ed25519@openssh.com AAAAGnNrLXNzaC1lZDI1NTE5QG9wZW5zc2guY29tAAAAIDbXa6BWHM2avjHZlCzPfnYt/5we+WsdgN9asF9FS9DRAAAABHNzaDo=
storage:
  files:
    - path: /etc/zincati/config.d/55-updates-strategy.toml
      contents:
        inline: |
          [updates]
          strategy = "periodic"

          [updates.periodic]
          time_zone = "Europe/Amsterdam"

          [[updates.periodic.window]]
          days = [ "Sat", "Sun" ]
          start_time = "19:00"
          length_minutes = 120
    - path: /opt/install_secureblue.sh
      contents:
        source: https://raw.githubusercontent.com/secureblue/secureblue/refs/heads/live/files/system/usr/share/secureblue/install_secureblue.sh
        verification:
          hash: sha256-e9bef78f28df075b2ec5ac4e47305b9d17d054a8ff00927ff855e1b7c947137a
      mode: 0755
    - path: /opt/run_install_secureblue.sh
      contents:
        inline: |
          sudo systemctl disable --now zincati.service 2>/dev/null
          sudo systemctl stop rpm-ostreed-automatic.timer rpm-ostreed-automatic.service 2>/dev/null
          if [ ! -f /opt/install_secureblue.sh ]; then
            echo "Error: install_secureblue.sh was not downloaded."
          else
            sudo /opt/install_secureblue.sh
            if [ $? != 0 ]; then
              echo "Error: Secureblue installer failed."
            else
              sed -i '/\/opt\/run_install_secureblue.sh/d' /var/home/core/.bash_profile
              sudo rm -f /opt/*install_secureblue.sh
              echo "Automatically rebooting in 5 seconds..."
              sleep 5
              sudo systemctl reboot
            fi
          fi
      mode: 0755
    - path: /var/home/core/.bash_profile
      overwrite: false
      append:
      - inline: |
          /opt/run_install_secureblue.sh
    - path: /opt/secureblue_post_install.sh
      contents:
        inline: |
          #!/bin/bash
          set -e

          # Enroll SecureBoot key if not already enrolled
          if ! mokutil --sb-state | grep -q "SecureBoot enabled"; then
            echo "Enrolling secureblue SecureBoot key..."
            ujust enroll-secureblue-secure-boot-key
          else
            echo "SecureBoot key already enrolled."
          fi

          # Setup USBGuard
          echo "Setting up USBGuard..."
          ujust setup-usbguard

          # Setup kernel hardening
          echo "Setting up kernel hardening..."
          ujust set-kargs-hardening

          # Enable containers
          echo "Setting up container permissions..."
          ujust toggle-container-domain-userns-creation

          # Create admin user with wheel group
          echo "Creating admin user..."
          if ! id -u admin &>/dev/null; then
            run0
            adduser admin
            usermod -aG wheel admin
            echo "Please enter the password for the admin user:"
            passwd admin
          else
            echo "Admin user already exists."
          fi

          # Validate secureblue setup
          echo "Running secureblue audit..."
          ujust audit-secureblue

          # Note: Removing wheel privileges from primary user requires user interaction
          echo "To remove wheel privileges from your primary user, log in as 'admin' and run:"
          echo "  run0 gpasswd -d <your-username> wheel"
          echo "Then reboot the system."

          # Note: DNS configuration requires user interaction
          echo "To configure system DNS, run manually:"
          echo "  ujust dns-selector"

          # Note: Enable bash environment lockdown
          echo "To enable bash environment lockdown (only do this one completely setup):"
          echo "  ujust toggle-bash-environment-lockdown"

          # Note: LUKS FIDO2 or TPM2 unlock setup requires user interaction
          echo "To set up LUKS FIDO2 unlock, run manually:"
          echo "  ujust setup-luks-fido2-unlock"
          echo "To set up LUKS TPM2 unlock (if not using fTPM on AMD), run manually:"
          echo "  ujust setup-luks-tpm-unlock"

          echo "Post-install setup complete. Review manual steps above."
      mode: 0755
systemd:
  units:
    - name: bootloader-update.service
      enabled: true